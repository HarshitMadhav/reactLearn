.....................Push notifications using Firebase android.......

- signup with gmail account
- go to firebase
- select add new project in firebase
- set the domain of new project as mentioned in the androidmanifest.xml
  like this line package="com.example"
  use com.example the same package as domain to the new firebase android project (the same app for which we want to get push notifications)

- download the 'google-services.json' after the new project creation on firebase
- now move the downloaded 'google-services.json' to the path AppName\android\app
- provide these permissions in androidmanifest.xml
  <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
    <uses-permission android:name="android.permission.WAKE_LOCK" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission android:name="android.permission.VIBRATE" />

- then in android manifest write-- 

        <service android:name="com.dieam.reactnativepushnotification.modules.RNPushNotificationRegistrationService"/>

this line just above </application> for calling onregister() of react native push-notification library
    
    <application>
      ....
        <service android:name="com.dieam.reactnativepushnotification.modules.RNPushNotificationRegistrationService"/>
    ....
    </application>

- add  classpath 'com.google.gms:google-services:4.2.0' in project.gradle file

      dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.gms:google-services:4.2.0'   //add this here
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

- add these lines in build.gradle Module:app
      implementation 'com.google.android.gms:play-services-base:16.1.0'
      implementation project(':react-native-push-notification')
      implementation 'com.google.firebase:firebase-core:16.0.6'
      implementation 'com.google.firebase:firebase-messaging:17.3.4'

  final this block will look like the below and also add **** apply plugin: 'com.google.gms.google-services' ****** at the very end as shown
  after dependencies block. If we do not add this apply plugin line our app will crash on receiving push notification.

  dependencies {
    implementation project(':react-native-push-notification')   // add this
    implementation project(':react-native-device-info')
    implementation project(':react-native-video')
    implementation project(':react-native-gesture-handler')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'com.google.android.gms:play-services-base:16.1.0'         // add this
    implementation 'com.google.firebase:firebase-core:16.0.6'           // add this
    implementation 'com.google.firebase:firebase-messaging:17.3.4'        // add this

}
apply plugin: 'com.google.gms.google-services'                         // add this

- dont forget to keep check on versions mismatch of firebase and always use the latest version of firebase to receive notifications.
- add this to settings.gradle
    
    include ':react-native-push-notification'
    project(':react-native-push-notification').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-push-notification/android')

- now npm install the react-native-push-notification library and then run link command for the react-native-push-notification library
    react-native link react-native-push-notification
    
- if not linked by the react-native link then link manually in mainapplication.java
                  import com.dieam.reactnativepushnotification.ReactNativePushNotificationPackage;  // <--- Import Package 

                  public class MainApplication extends Application implements ReactApplication {

                    private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {
                        @Override
                        protected boolean getUseDeveloperSupport() {
                          return BuildConfig.DEBUG;
                        }

                        @Override
                        protected List<ReactPackage> getPackages() {

                        return Arrays.<ReactPackage>asList(
                            new MainReactPackage(),
                            new ReactNativePushNotificationPackage() // <---- Add the Package 
                        );
                      }
                    };

- Now in react native project App.js file do something like this: (Replace gcm with fcm or look at the next App.js after the NotifService.js file)

                                /**
                   * Sample React Native App
                   * https://github.com/facebook/react-native
                   *
                   * @format
                   * @flow
                   */

                  import React, { Component } from 'react';
                  import { TextInput, StyleSheet, Text, View, TouchableOpacity, Alert } from 'react-native';
                  import NotifService from './NotifService';
                  import appConfig from './app.json';

                  type Props = {};
                  export default class App extends Component<Props> {

                    constructor(props) {
                      super(props);
                      this.state = {
                        senderId: appConfig.senderID
                      };

                      this.notif = new NotifService(this.onRegister.bind(this), this.onNotif.bind(this));
                    }

                    render() {
                      return (
                        <View style={styles.container}>
                          <Text style={styles.title}>Example app react-native-push-notification</Text>
                          <View style={styles.spacer}></View>
                          <TextInput style={styles.textField} value={this.state.registerToken} placeholder="Register token" />
                          <View style={styles.spacer}></View>

                          <TouchableOpacity style={styles.button} onPress={() => { this.notif.localNotif() }}><Text>Local Notification (now)</Text></TouchableOpacity>
                          <TouchableOpacity style={styles.button} onPress={() => { this.notif.scheduleNotif() }}><Text>Schedule Notification in 30s</Text></TouchableOpacity>
                          <TouchableOpacity style={styles.button} onPress={() => { this.notif.cancelNotif() }}><Text>Cancel last notification (if any)</Text></TouchableOpacity>
                          <TouchableOpacity style={styles.button} onPress={() => { this.notif.cancelAll() }}><Text>Cancel all notifications</Text></TouchableOpacity>
                          <TouchableOpacity style={styles.button} onPress={() => { this.notif.checkPermission(this.handlePerm.bind(this)) }}><Text>Check Permission</Text></TouchableOpacity>

                          <View style={styles.spacer}></View>
                          <TextInput style={styles.textField} value={this.state.senderId} onChangeText={(e) => {this.setState({ senderId: e })}} placeholder="GCM ID" />
                          <TouchableOpacity style={styles.button} onPress={() => { this.notif.configure(this.onRegister.bind(this), this.onNotif.bind(this), this.state.senderId) }}><Text>Configure Sender ID</Text></TouchableOpacity>
                          {this.state.gcmRegistered && <Text>GCM Configured !</Text>}

                          <View style={styles.spacer}></View>
                        </View>
                      );
                    }

                    onRegister(token) {
                      Alert.alert("Registered !", JSON.stringify(token));
                      console.log(token);
                      this.setState({ registerToken: token.token, gcmRegistered: true });
                    }

                    onNotif(notif) {
                      console.log(notif);
                      Alert.alert(notif.title, notif.message);
                    }

                    handlePerm(perms) {
                      Alert.alert("Permissions", JSON.stringify(perms));
                    }
                  }


                  const styles = StyleSheet.create({
                    container: {
                      flex: 1,
                      justifyContent: 'center',
                      alignItems: 'center',
                      backgroundColor: '#F5FCFF',
                    },
                    welcome: {
                      fontSize: 20,
                      textAlign: 'center',
                      margin: 10,
                    },
                    button: {
                      borderWidth: 1,
                      borderColor: "#000000",
                      margin: 5,
                      padding: 5,
                      width: "70%",
                      backgroundColor: "#DDDDDD",
                      borderRadius: 5,
                    },
                    textField: {
                      borderWidth: 1,
                      borderColor: "#AAAAAA",
                      margin: 5,
                      padding: 5,
                      width: "70%"
                    },
                    spacer: {
                      height: 10,
                    },
                    title: {
                      fontWeight: "bold",
                      fontSize: 20,
                      textAlign: "center",
                    }
                  });


- Now in react native project create NotifService.js and make sure to provide the senderID:
          import PushNotification from 'react-native-push-notification';

          export default class NotifService {

            constructor(onRegister, onNotification) {
              this.configure(onRegister, onNotification);

              this.lastId = 0;
            }

            configure(onRegister, onNotification, fcm = "") {
              PushNotification.configure({
                // (optional) Called when Token is generated (iOS and Android)
                onRegister: onRegister, //this._onRegister.bind(this),

                // (required) Called when a remote or local notification is opened or received
                onNotification: onNotification, //this._onNotification,

                // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
                senderID: 'senderId',     // paste the serverId here from the firebase

                // IOS ONLY (optional): default: all - Permissions to register.
                permissions: {
                  alert: true,
                  badge: true,
                  sound: true
                },

                // Should the initial notification be popped automatically
                // default: true
                popInitialNotification: true,

                /**
                  * (optional) default: true
                  * - Specified if permissions (ios) and token (android and ios) will requested or not,
                  * - if not, you must call PushNotificationsHandler.requestPermissions() later
                  */
                requestPermissions: true,
              });
            }

            localNotif() {
              this.lastId++;
              PushNotification.localNotification({
                /* Android Only Properties */
                id: ''+this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                ticker: "My Notification Ticker", // (optional)
                autoCancel: true, // (optional) default: true
                largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
                smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
                bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
                subText: "This is a subText", // (optional) default: none
                color: "red", // (optional) default: system default
                vibrate: true, // (optional) default: true
                vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                tag: 'some_tag', // (optional) add tag to message
                group: "group", // (optional) add group to message
                ongoing: false, // (optional) set whether this is an "ongoing" notification

                /* iOS only properties */
                alertAction: 'view', // (optional) default: view
                category: null, // (optional) default: null
                userInfo: null, // (optional) default: null (object containing additional notification data)

                /* iOS and Android properties */
                title: "Local Notification", // (optional)
                message: "My Notification Message", // (required)
                playSound: false, // (optional) default: true
                soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
                actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
              });
            }

            scheduleNotif() {
              this.lastId++;
              PushNotification.localNotificationSchedule({
                date: new Date(Date.now() + (30 * 1000)), // in 30 secs

                /* Android Only Properties */
                id: ''+this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                ticker: "My Notification Ticker", // (optional)
                autoCancel: true, // (optional) default: true
                largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
                smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
                bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
                subText: "This is a subText", // (optional) default: none
                color: "blue", // (optional) default: system default
                vibrate: true, // (optional) default: true
                vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                tag: 'some_tag', // (optional) add tag to message
                group: "group", // (optional) add group to message
                ongoing: false, // (optional) set whether this is an "ongoing" notification

                /* iOS only properties */
                alertAction: 'view', // (optional) default: view
                category: null, // (optional) default: null
                userInfo: null, // (optional) default: null (object containing additional notification data)

                /* iOS and Android properties */
                title: "Scheduled Notification", // (optional)
                message: "My Notification Message", // (required)
                playSound: true, // (optional) default: true
                soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
              });
            }

            checkPermission(cbk) {
              return PushNotification.checkPermissions(cbk);
            }

            cancelNotif() {
              PushNotification.cancelLocalNotifications({id: ''+this.lastId});
            }

            cancelAll() {
              PushNotification.cancelAllLocalNotifications();
            }
          }


- Now run using react-native run-android and push notification will be working now.
- To test GO TO "CLOUD MESSAGING" on firebase panel click on "New Notification" to create new notification and then post new notifications

........... In order to send notification to the particular device using FCM you will have to generate and get the device token and
            send that token after the user signup for the app and you can get that device token in console.log and then copy and paste
            that device token in the "New notification" -> "Test on device" in firebase panel.
            Once device token is generated we store that into async storage and then send it as a parameter when user signup for 
            the app.
            
  The modified App.js for device token as storing it into asyncstorage is::
    
                  import React, {Component} from 'react';
                  import {TouchableOpacity,Platform, AsyncStorage,StyleSheet, Text, View, Alert,TextInput} from 'react-native';
                  import NotifService from './NotifService';
                  import appConfig from './app.json';
                  import PushNotification from 'react-native-push-notification';

                  import AppNavigator from './Navigator';

                  type Props = {};
                  export default class App extends Component<Props> {
                  constructor(props) {
                      super(props);
                      this.state = {
                        senderId: appConfig.senderID
                      };

                      this.notif = new NotifService(this.onRegister.bind(this), this.onNotif.bind(this));
                    }


                    render() {
                      return (
                  <AppNavigator/>
                        );
                    }

                    onRegister(token) {
                      AsyncStorage.setItem('token', token.token);

                      console.log( 'TOKEN:', token );
                      this.setState({ registerToken: token.token, fcmRegistered: true });
                    }

                    onNotif(notif) {
                      console.log(notif);
                      Alert.alert(notif.title, notif.message);
                    }

                    handlePerm(perms) {
                      Alert.alert("Permissions", JSON.stringify(perms));
                    }
                  }


                  const styles = StyleSheet.create({
                    container: {
                      flex: 1,
                      justifyContent: 'center',
                      alignItems: 'center',
                      backgroundColor: '#F5FCFF',
                    },
                    welcome: {
                      fontSize: 20,
                      textAlign: 'center',
                      margin: 10,
                    },
                    button: {
                      borderWidth: 1,
                      borderColor: "#000000",
                      margin: 5,
                      padding: 5,
                      width: "70%",
                      backgroundColor: "#DDDDDD",
                      borderRadius: 5,
                    },
                    textField: {
                      borderWidth: 1,
                      borderColor: "#AAAAAA",
                      margin: 5,
                      padding: 5,
                      width: "70%"
                    },
                    spacer: {
                      height: 10,
                    },
                    title: {
                      fontWeight: "bold",
                      fontSize: 20,
                      textAlign: "center",
                    }
                  });
  
NOTE ::-- YOU can also use FCM online testers to test notifications for devices after device token is copied from Console.log
          
:::::::  Refer :::::::
https://github.com/zo0r/react-native-push-notification/issues/480
https://stackoverflow.com/questions/52112770/using-react-native-push-notification-app-crashes-when-receiving-new-fcm-notific
