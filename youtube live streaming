refer here : https://github.com/davidohayon669/react-native-youtube/issues/268
also here : https://github.com/davidohayon669/react-native-youtube/issues/268#issuecomment-390653982

Use react native youtube package for this

I am using this componentDidMount trick to get the videoId

componentDidMount () {
    fetch(`${YOUTUBE_API}`)
      .then((response) => response.json())
      .then((responseJson) => {
        if (responseJson && responseJson.items[0]) this.setState({ videoId: responseJson.items[0].id.videoId })
      })
      .catch((error) => {
        console.error(error)
      })
  }

where YOUTUBE_API is

const YOUTUBE_API = `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${CHANNEL_ID}&eventType=live&type=video&key=${API_KEY}`

and then in render method

  render () {
    const { videoId } = this.state
    return (
      <YouTube
        apiKey={API_KEY}
        videoId={videoId}   // The YouTube video ID
        showFullscreenButton
        onReady={e => this.setState({ isReady: true })}
        onChangeState={e => this.setState({ status: e.state })}
        onChangeQuality={e => this.setState({ quality: e.quality })}
        onError={e => this.setState({ error: e.error })}
        style={{ height: 300 }}
        />
    )
  }
}

What I did example

take YOUTUBE_API
const YOUTUBE_API = `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${`UCFbD2k_Rw_kYVTWb9k7t-cg`}&eventType=live&type=video&key=${GLOBAL.YOUTUBE_API}`


    componentDidMount() {
      this.showLoading()
      console.log(YOUTUBE_API)
    fetch(`${YOUTUBE_API}`)
      .then((response) => response.json())
      .then((responseJson) => {
        this.hideLoading()
        if (responseJson && responseJson.items[0]) 
        {
          this.setState({ videoId: responseJson.items[0].id.videoId })
          alert(this.state.videoId)
        }
      })
      .catch((error) => {
        console.error(error)
      })
  }
  
  in render
  
        <YouTube
              style={{ height:hp(20),width:wp('95%'),borderTopLeftRadius:6, borderTopRightRadius:6 }}
              apiKey={GLOBAL.YOUTUBE_API}
              videoId= {this.state.videoId}  // The YouTube video ID
              play={false}             // control playback of video with true/false
              fullscreen={false}       // control whether the video should play in fullscreen or inline
              loop={false}             // control whether the video should loop when ended
              controls={1}
              onReady={e => this.setState({ isReady: true })}
              onChangeState={e => this.setState({ status: e.state })}
              onChangeQuality={e => this.setState({ quality: e.quality })}
              onError={e => this.setState({ error: e.error })}

              style={{ height: '80%', width: '100%'}}/>


