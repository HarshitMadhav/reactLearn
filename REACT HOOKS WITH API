import React, { useState, useEffect } from 'react';
import {Text, View} from 'react-native';
const GLOBAL = require('./Global');
import Header from 'react-native-custom-headers'
import IndicatorCustom from './IndicatorCustom'

const Pokemons=(props)=>{

	const [ pokemons, setPokemons ] = useState();
	const [ loading, showLoading] = useState(false);

	useEffect(()=>{
		// works like mounting (willMount or didmount)
		// alert(JSON.stringify(props))
		getData();
	}
	)

	async function getData(){
	    const url = GLOBAL.BASE_URL + 'Pokemons';
	    // showLoading(true)
	    fetch(url, {
	      method: 'POST',
	      headers: {
	        'Content-Type': 'application/json',
	      },
	      body: JSON.stringify({
	        mode: 'Pokemons',
	      }),
	    })
	      .then(response => response.json())
	      .then(responseJson => {
              // showLoading(false)

	        console.log(JSON.stringify(responseJson));
	        if (responseJson.status == true) {
	        	setPokemons(responseJson.Pokemons)
	        } else {

	        }
	      })
	      .catch(error => {
	        console.error(error);
	        // this.hideLoading()
	      });

	}

	// We dont use "this" referencing in HOOKS


	return(

        <View style={{flex:1, flexDirection:'column', backgroundColor:'white'}}>
           <Header navigation={props.navigation}
           showHeaderImage={false}
           headerColor ={'#E60000'}
           backImagePath={require('./resources/back.png')}
           headerName={'POKEMONS'}
           headerTextStyle={{fontFamily:'Nunito-SemiBold', color:'white',marginLeft:10}} />
           {loading && (
           	            <IndicatorCustom/>

           	)}
           {loading == false &&(
		
				<Text>{pokemons}</Text>

           	)}
	</View>

	);
}

export default Pokemons
