// change password from forget password and change password from settings in profile.


import React, {Component} from 'react';
import { StyleSheet,Text,TextInput,AsyncStorage, View,Image,Modal ,Alert,FlatList,Dimensions ,TouchableHighlight,TouchableOpacity,ActivityIndicator,SafeAreaView} from 'react-native';
const window = Dimensions.get('window');
import Button from 'react-native-button';
import { TextField } from 'react-native-material-textfield';
import axios from 'react-native-axios';
type Props = {};
const GLOBAL = require('./Global');
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import CodeInput from 'react-native-confirmation-code-input';
import stringsoflanguages from './Local';
import Dialog, { DialogContent } from 'react-native-popup-dialog';
var codes = '';
export default class ChangePassword extends Component {
    state = {
        name :'',
        email:'',
        phone :'',
        company :'',oldpass:'', newpass:'', confpass:'',
        modalVisible: false,
        visible:false,
        visibles:false,
    };

    static navigationOptions = ({ navigation }) => {
        return {
            header: () => null,
            animations: {
                setRoot: {
                    waitForRender: false
                }
            }
        }
    }

    hideLoading() {
        this.setState({loading: false})
    }


    showLoading() {
        this.setState({loading: true})
    }




    myCallbackFunctions = (res) => {
        this.hideLoading()

//        alert(JSON.stringify(res))

        if (res.status == 200){
          alert(stringsoflanguages.schpass)
          this.props.navigation.replace('Login')
        }
        else{
            alert(stringsoflanguages.unable)
        }

    }


myCallbackFunctionsprofile=(res)=>{
//  alert(JSON.stringify(res))
  this.hideLoading()
  if (res.status == 200){
    alert(stringsoflanguages.schpass)
    this.props.navigation.goBack()
}else if(res.status == 202) {
  alert(stringsoflanguages.wrold)
}
  else{
      alert(stringsoflanguages.unable)
  }

}

    _handlePress() {

      if(this.state.newpass == "" || this.state.newpass.length<6){
        alert(stringsoflanguages.newpassword + stringsoflanguages.minpass)
      }else if(this.state.confpass == "" || this.state.confpass.length<6) {
        alert(stringsoflanguages.confpassword + stringsoflanguages.minpass)
      }else{
        if(this.state.newpass == this.state.confpass){
  //        alert('yessss')
          this.showLoading()
          var self=this;

          var url = GLOBAL.BASE_URL + 'forgotpassword';

          axios.post(url, {
              mobile: GLOBAL.mobile,
              password: this.state.newpass


          })
              .then(function (response) {

                  self.myCallbackFunctions(response.data)



              })
              .catch(function (error) {
                  console.log(error);
                  //  self.myCallbackFunction()

              });

            }else {
                alert(stringsoflanguages.matchpass)
            }

      }

    }


    _changePassfromProfile=()=>{

      if(this.state.oldpass =="" || this.state.oldpass.length<6 ){
        alert(stringsoflanguages.oldpassword + stringsoflanguages.minpass)
      }
      else if(this.state.newpass == "" || this.state.newpass.length<6 ){
        alert( stringsoflanguages.newpassword + stringsoflanguages.minpass)
      }else if(this.state.confpass == ""  || this.state.confpass.length<6 ) {
        alert(stringsoflanguages.confpassword + stringsoflanguages.minpass)
      }else{
        if(this.state.newpass == this.state.confpass){
  //        alert('yessss')
          this.showLoading()
          var self=this;

          var url = GLOBAL.BASE_URL + 'changepassword';

          axios.post(url, {
              user_id: GLOBAL.userID,
              new_password: this.state.newpass,
              old_password: this.state.oldpass


          })
              .then(function (response) {

                  self.myCallbackFunctionsprofile(response.data)



              })
              .catch(function (error) {
                  console.log(error);
                  //  self.myCallbackFunction()

              });

            }else {
                alert(stringsoflanguages.matchpass)
            }

      }
    }

    render() {
        let { oldpass } = this.state;
        let { newpass } = this.state;
        let { confpass } = this.state;

        if(this.state.loading){
            return(
                <View style={styles.container}>
                    <ActivityIndicator style = {styles.loading}

                                       size="large" color='#006FA5' />
                </View>
            )
        }
        return (

                <View style={styles.container}>
                    <KeyboardAwareScrollView keyboardShouldPersistTaps='always'>

                        <Text style = {{marginLeft: '5%',width:'90%',color:'#006FA5',fontSize: 30,marginTop: '30%',fontFamily:'AvenirLTStd-Heavy'}}>
                            {stringsoflanguages.chpass}

                        </Text>

                        <Text style = {{marginLeft: '5%',width:'90%',color:'#77869E',fontSize: 18,marginTop: '4%',fontFamily:'AvenirLTStd-Heavy'}}>
                            {stringsoflanguages.chpassdesc}

                        </Text>
{GLOBAL.ischange=='1' && (
  <View style = {{marginLeft:'5%',width:'90%'}}>

  <TextField
      label={stringsoflanguages.oldpassword}
      value={oldpass}
      secureTextEntry={true}
      onChangeText={ (oldpass) => this.setState({ oldpass }) }
  />
  </View>

)}

                        <View style = {{marginLeft:'5%',width:'90%'}}>

                        <TextField
                            label={stringsoflanguages.newpassword}
                            value={newpass}
                            secureTextEntry={true}
                            onChangeText={ (newpass) => this.setState({ newpass }) }
                        />
                        </View>


                        <View style = {{marginLeft:'5%',width:'90%'}}>

                        <TextField
                            label={stringsoflanguages.confpassword}
                            value={confpass}
                            secureTextEntry={true}
                            onChangeText={ (confpass) => this.setState({ confpass }) }
                        />
                        </View>
                        {GLOBAL.ischange=='1' && (
                          <Button
                              style={{padding:8,marginTop:70,fontSize: 18, color: 'white',backgroundColor:'#006FA5',marginLeft:'5%',width:'90%',height:40,fontFamily:'AvenirLTStd-Heavy',borderRadius:4}}
                              styleDisabled={{color: 'red'}}
                              onPress={() => this._changePassfromProfile()}>
                              {stringsoflanguages.confirm}
                          </Button>
)}
{GLOBAL.ischange=='0' && (
  <Button
      style={{padding:8,marginTop:70,fontSize: 18, color: 'white',backgroundColor:'#006FA5',marginLeft:'5%',width:'90%',height:40,fontFamily:'AvenirLTStd-Heavy',borderRadius:4}}
      styleDisabled={{color: 'red'}}
      onPress={() => this._handlePress()}>
      {stringsoflanguages.confirm}
  </Button>

)}


                    </KeyboardAwareScrollView>

                </View>

        );
    }
}

const styles = StyleSheet.create({
    wrapper: {
    },
    container: {

        backgroundColor :'white'
    },
    loading: {
        position: 'absolute',
        left: window.width/2 - 30,

        top: window.height/2,

        opacity: 0.5,

        justifyContent: 'center',
        alignItems: 'center'
    },
    slide1: {

        marginLeft : 50,

        width: window.width - 50,
        height:300,
        resizeMode:'contain',
        marginTop : window.height/2 - 200


    },
    slide2: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    slide3: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#92BBD9',
    },
    text: {
        color: '#fff',
        fontSize: 30,
        fontWeight: 'bold',
    }
})
