// filter a flat list data according to the selected item in other flatlist using api call 


import React, {Component} from 'react';
import { StyleSheet,Text,TextInput, View,Image ,Alert,FlatList,Dimensions ,Linking,TouchableOpacity,ActivityIndicator,SafeAreaView} from 'react-native';
const window = Dimensions.get('window');
import Button from 'react-native-button';
import { TextField } from 'react-native-material-textfield';
type Props = {};
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import stringsoflanguages from './Local';
import axios from 'react-native-axios';
const GLOBAL = require('./Global');
import DateTimePicker from "react-native-modal-datetime-picker";
import { Dropdown } from 'react-native-material-dropdown';
var moment = require('moment');
import RadioForm, {RadioButton, RadioButtonInput, RadioButtonLabel} from 'react-native-simple-radio-button';
import Dialog, {DialogContent} from "react-native-popup-dialog";
import MaterialTabs from 'react-native-material-tabs';
var type = 0;
var catid = '';
var tomorrow;
var ids = 'all';


export default class DailyLabourReport extends Component {
    state = {
        name :'',
        email:'',
        phone :'',
        company :'',
        selectedTab:0,
        data:[],
        done:false,
        movie:[],
        labourCategoryid:''

    };


    static navigationOptions = ({ navigation }) => {
        return {
            header: () => null,
            animations: {
                setRoot: {
                    waitForRender: false
                }
            }
        }
    }

    hideLoading() {
        this.setState({loading: false})
    }


    showLoading() {
        this.setState({loading: true})
    }



    myCallbackFunctions = (res) => {

        this.hideLoading()
        if (res.status == 200){
            this.setState({data:res.data})

        }
        else{
            alert(stringsoflanguages.unable)
        }

    }

    all = (res) => {
        //alert(JSON.stringify(res))
//        this.setState({movie: []})
        this.setState({movie:res.category})
        this.setState({labourCategoryid : ''})

    }
    loadHomes(){
//      alert(this.state.labourCategoryid)
        var self=this;
        var url = GLOBAL.BASE_URL + 'labour_list';
        axios.post(url, {
            user_id: GLOBAL.userID,
            category_id: ids

        })
            .then(function (response) {

                self.all(response.data)

            })
            .catch(function (error) {
                alert(error)
                //  self.myCallbackFunction()

            });
    }

    loadHome()
    {
        var self=this;
        var url = GLOBAL.BASE_URL + 'getCategory_labour';
  //      alert(url)
        axios.get(url)
            .then(function (response) {

                self.myCallbackFunctions(response.data)

            })
            .catch(function (error) {
                alert(error)
                //  self.myCallbackFunction()

            });
    }

    componentDidMount(){
        this.loadHome()
        this.loadHomes()
    }

    passData =(item) =>{
        GLOBAL.apna = item
        this.props.navigation.navigate('SupervisorDetail')
    }


    _renderItems = ({item,index}) => {


        return (


            <TouchableOpacity onPress={() => this.passData(item)
            }>


                <View style = {{margin:10,borderRadius:16,backgroundColor:'white'}}>

                    <View style = {{backgroundColor:"#f7fbfc",borderRadius:4,height:52,margin:10}}>

                        <View style = {{flexDirection:'row',marginTop:8}}>

                            <Image style = {{width :30 ,height: 30,marginLeft:4,borderRadius: 15, resizeMode:'contain'}}
                                   source={require('./tag.png')}/>

                            <View style = {{marginLeft:8}}>

                                <Text style = {{fontSize : 16,color :'#042C5C', height:'auto',fontFamily:'AvenirLTStd-Medium',marginLeft:4}}>
                                    {item.name}

                                </Text>

                                <Text style = {{fontSize : 12,color :'#77869E', height:'auto',fontFamily:'AvenirLTStd-Medium',marginLeft:4}}>
                                    {item.code}

                                </Text>
                            </View>

                        </View>


                    </View>

                    <View style = {{flexDirection:'row',marginLeft:14,marginTop:3}}>
                        <Image style = {{width :13 ,height: 13,marginLeft:4,resizeMode: 'contain'}}
                               source={require('./tag.png')}/>

                        <Text style = {{fontSize : 14,color :'#77869E', height:'auto',fontFamily:'AvenirLTStd-Medium',marginLeft:12}}>
                            {item.category_name}

                        </Text>

                    </View>


                    <View style = {{flexDirection:'row',marginLeft:14,marginTop:12}}>
                        <Image style = {{width :13 ,height: 13,marginLeft:4,resizeMode: 'contain'}}
                               source={require('./worker.png')}/>

                        <Text style = {{alignSelf: 'center',fontSize : 14,color :'#77869E', height:'auto',fontFamily:'AvenirLTStd-Medium',marginLeft:12, marginBottom:10}}>
                            {item.experience} Year

                        </Text>

                    </View>



                </View>

            </TouchableOpacity>

        )
    }

    _handleCategorySelect = (item,index) => {
      ids = item.id
        let { data } = this.state;
        for(let i = 0; i < data.length; i++){
            data[i].selected = "";
        }


        let targetPost = data[index];
        catid =  data[index].id
      //  this.getMoviesFromApiAsync()
        // Flip the 'liked' property of the targetPost
        targetPost.selected = "1";

        data[index] = targetPost;

        // Then update targetPost in 'posts'
        // You probably don't need the following line.
        // posts[index] = targetPost;

        // Then reset the 'state.posts' property

        this.setState({ data: data})
        this.setState({labourCategoryid: data[index].id.toString()})
//        alert(data[index].id)
        this.loadHomes()

    }


    _renderItemCateg = (item,index)=>{


        return (
            <TouchableOpacity
                onPress={() => this._handleCategorySelect(item.item,item.index)}>

                {item.item.selected == '1' && (
                    <View style = {{margin :10 ,height :27,backgroundColor:'#006fa5',padding:5,alignSelf: 'center',shadowColor: 'black',elevation:5,
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.8,
                        shadowRadius: 2,borderRadius:15}}>

                        <Text style = {{fontSize: 14,color:'white'}}>
                            {item.item.value}
                        </Text>

                    </View>

                )}

                {item.item.selected != '1' && (
                    <Text style = {{margin :10 ,fontSize: 14,height :27,backgroundColor:'white',padding:5,alignSelf: 'center',borderRadius:15,color:'#77869E'} }>


                        {item.item.value}


                    </Text>

                )}
            </TouchableOpacity>
        )
    }

    render() {

        let { name } = this.state;

        if(this.state.loading){
            return(
                <View style={styles.container}>
                    <ActivityIndicator style = {styles.loading}

                                       size="large" color='#006FA5' />
                </View>
            )
        }

        return (

                <View style={styles.container}>


                    <View style = {{flexDirection:  'row',marginTop:20 ,width :'100%'}}>

                        <TouchableOpacity onPress={() => this.props.navigation.goBack()
                        }>

                            <Image style = {{width :30 ,height: 30,marginLeft:20,marginTop:-2,resizeMode: 'contain'}}
                                   source={require('./back.png')}/>

                        </TouchableOpacity>


                        <Text style = {{marginLeft: 12,color:'#042C5C',fontSize: 22,fontFamily:'AvenirLTStd-Heavy',width:'60%'}}>
                            {stringsoflanguages.labourList}

                        </Text>



                        <TouchableOpacity
                        style = {{alignSelf: 'flex-end',width :40 ,height: 40,marginLeft:40,marginTop:-2,}}
                        onPress={() => this.props.navigation.navigate('AddLabour')
                        }>

                            <Image style = {{alignSelf: 'flex-end',width :40 ,height: 40,resizeMode: 'contain'}}
                                   source={require('./icon.png')}/>

                        </TouchableOpacity>


                    </View>




                    <KeyboardAwareScrollView style = {{marginBottom:20}}
                    keyboardShouldPersistTaps='always'>

                        <View style = {{backgroundColor:'#F6F8F9',flex:1}}>

                            <FlatList style= {{flexGrow:0,marginTop:7}}
                                      data={this.state.data}

                                      horizontal
                                      showsHorizontalScrollIndicator={false}
                                      keyExtractor = { (item, index) => index.toString() }
                                      extraData={this.state}
                                      renderItem={this._renderItemCateg}
                            />



                            <FlatList style= {{marginTop:5}}
                                      data={this.state.movie}
                                      numColumns={1}
                                      keyExtractor = { (item, index) => index.toString() }
                                      renderItem={this._renderItems}
                                      extraData={this.state}
                            />

                        </View>
                    </KeyboardAwareScrollView>
                </View>
        );
    }
}

const styles = StyleSheet.create({
    wrapper: {
    },
    container: {

        backgroundColor :'white',
    },
    loading: {
        position: 'absolute',
        left: window.width/2 - 30,

        top: window.height/2,

        opacity: 0.5,

        justifyContent: 'center',
        alignItems: 'center'
    },
    slide1: {

        marginLeft : 50,

        width: window.width - 50,
        height:300,
        resizeMode:'contain',
        marginTop : window.height/2 - 200


    },
    slide2: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    slide3: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#92BBD9',
    },
    text: {
        color: '#fff',
        fontSize: 30,
        fontWeight: 'bold',
    }
})
